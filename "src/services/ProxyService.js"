
class ProxyService {
  constructor() {}

  async getProxyUrl(url) {
    try {
      // Check if the URL has a CORS issue
      const corsIssue = await this.detectCorsIssue(url);

      if (corsIssue) {
        // If there's a CORS issue, try to use a proxy
        return this.getProxyUrlFromList();
      } else {
        // If no CORS issue is detected, just return the original URL
        return url;
      }
    } catch (error) {
      console.error('Error detecting CORS issue:', error);
      throw error;
    }
  }

  async getProxyUrlFromList() {
    try {
      const proxyUrls = await this.getAvailableProxies();
      // Choose a random proxy from the list
      return proxyUrls[Math.floor(Math.random() * proxyUrls.length)];
    } catch (error) {
      console.error('Error getting available proxies:', error);
      throw error;
    }
  }

  async getAvailableProxies() {
    try {
      const proxies = await fetch('/api/proxy-list');
      return await proxies.json();
    } catch (error) {
      console.error('Error fetching proxy list:', error);
      throw error;
    }
  }

  detectCorsIssue(url) {
    // TO DO: implement CORS issue detection logic
    // For now, just return a dummy value to test the service
    return true;
  }
}

export default ProxyService;
